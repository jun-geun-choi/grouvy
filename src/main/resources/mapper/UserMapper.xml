<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.grouvy.user.mapper.UserMapper">

    <!-- void insertUser(User user); -->
    <insert id="insertUser" parameterType="User">
        <selectKey keyProperty="userId"
                   resultType="int"
                   order="BEFORE">
            SELECT USERS_USER_ID_SEQ.NEXTVAL
            FROM DUAL
        </selectKey>

        INSERT INTO GROUVY_USERS
        (USER_ID, NAME, EMAIL, PASSWORD, LOGIN_PROVIDER, PHONE_NUMBER, EMAIL_VERIFIED)
        VALUES
        (#{userId}, #{name}, #{email}, #{password}, 'local', #{phoneNumber}, 'Y')
    </insert>

    <!--  List<String> getRoleNamesByUserId(int userId);  -->
    <select id="getRoleNamesByUserId" resultType="string">
        SELECT ROLE_NAME
        FROM GROUVY_USER_ROLES
        WHERE USER_ID = #{userId}
    </select>

    <resultMap id="UserResultMapWithRoleNames" type="User">
        <id column="user_id" property="userId"/>
        <result column="department_id" property="departmentId"/>
        <result column="employee_no" property="employeeNo"/>
        <result column="name" property="name"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <result column="login_provider" property="loginProvider"/>
        <result column="social_email" property="socialEmail"/>
        <result column="phone_number" property="phoneNumber"/>
        <result column="address" property="address"/>
        <result column="profile_img_path" property="profileImgPath"/>
        <result column="is_deleted" property="isDeleted"/>
        <result column="created_date" property="createdDate"/>
        <result column="updated_date" property="updatedDate"/>
        <result column="email_verified" property="emailVerified"/>
        <result column="position_no" property="positionNo"/>
        <result column="resign_date" property="resignDate"/>

        <!-- 부서 정보 매핑 -->
        <association property="department" javaType="Department">
            <id column="department_id" property="departmentId"/>
            <result column="department_name" property="departmentName"/>
        </association>

        <!-- 직위 정보 매핑 -->
        <association property="position" javaType="Position">
            <id column="position_no" property="positionNo"/>
            <result column="position_name" property="positionName"/>
        </association>

        <!-- 사용자 역할 목록 매핑 -->
        <collection property="roleNames"
                    column="user_id"
                    ofType="string"
                    select="getRoleNamesByUserId"/>
    </resultMap>

    <!--  User getUserByEmail(String email);  -->
    <select id="getUserByEmail" resultMap="UserResultMapWithRoleNames">
        SELECT U.USER_ID,
               U.DEPARTMENT_ID,
               U.EMPLOYEE_NO,
               U.NAME,
               U.EMAIL,
               U.PASSWORD,
               U.LOGIN_PROVIDER,
               U.SOCIAL_EMAIL,
               U.PHONE_NUMBER,
               U.ADDRESS,
               U.PROFILE_IMG_PATH,
               U.IS_DELETED,
               U.CREATED_DATE,
               U.UPDATED_DATE,
               U.EMAIL_VERIFIED,
               U.POSITION_NO,
               U.RESIGN_DATE,

               D.DEPARTMENT_ID,
               D.DEPARTMENT_NAME,

               P.POSITION_NO,
               P.POSITION_NAME

        FROM GROUVY_USERS U
                 LEFT JOIN GROUVY_DEPARTMENTS D ON U.DEPARTMENT_ID = D.DEPARTMENT_ID
                 LEFT JOIN GROUVY_POSITIONS P ON U.POSITION_NO = P.POSITION_NO
        WHERE EMAIL = #{email}
    </select>

    <!--  User getUserByUsernameWithRoleNames(String username);  -->
    <select id="getUserByEmailWithRoleNames" resultMap="UserResultMapWithRoleNames">
        SELECT U.USER_ID,
               U.DEPARTMENT_ID,
               U.EMPLOYEE_NO,
               U.NAME,
               U.EMAIL,
               U.PASSWORD,
               U.IS_DELETED,
               U.POSITION_NO,
               U.LOGIN_PROVIDER,
               U.SOCIAL_EMAIL,
               U.PHONE_NUMBER,
               U.ADDRESS,
               U.PROFILE_IMG_PATH,
               U.CREATED_DATE,
               U.UPDATED_DATE,
               U.EMAIL_VERIFIED,
               U.RESIGN_DATE,

               D.DEPARTMENT_ID,
               D.DEPARTMENT_NAME,

               P.POSITION_NO,
               P.POSITION_NAME

        FROM GROUVY_USERS U
                 LEFT JOIN GROUVY_DEPARTMENTS D ON U.DEPARTMENT_ID = D.DEPARTMENT_ID
                 LEFT JOIN GROUVY_POSITIONS P ON U.POSITION_NO = P.POSITION_NO

        WHERE U.EMAIL = #{email}
    </select>


    <!-- findByUserId: 특정 사용자 ID로 사용자 정보를 조회합니다. -->
    <select id="findByUserId" parameterType="int" resultMap="UserResultMapWithRoleNames">
        SELECT U.USER_ID,
               U.DEPARTMENT_ID,
               U.EMPLOYEE_NO,
               U.NAME,
               U.EMAIL,
               U.PASSWORD,
               U.LOGIN_PROVIDER,
               U.SOCIAL_EMAIL,
               U.PHONE_NUMBER,
               U.ADDRESS,
               U.PROFILE_IMG_PATH,
               U.IS_DELETED,
               U.CREATED_DATE,
               U.UPDATED_DATE,
               U.EMAIL_VERIFIED,
               U.POSITION_NO,
               U.RESIGN_DATE,

               D.DEPARTMENT_ID,
               D.DEPARTMENT_NAME,

               P.POSITION_NO,
               P.POSITION_NAME
        FROM GROUVY_USERS U
                 LEFT JOIN GROUVY_DEPARTMENTS D ON U.DEPARTMENT_ID = D.DEPARTMENT_ID
                 LEFT JOIN GROUVY_POSITIONS P ON U.POSITION_NO = P.POSITION_NO
        WHERE U.USER_ID = #{userId}
          AND U.IS_DELETED = 'N'
    </select>

    <!-- findUsersByDeptId: 특정 부서 ID로 소속 사용자 목록을 조회합니다. -->
    <select id="findUsersByDeptId" parameterType="long" resultMap="UserResultMapWithRoleNames">
        SELECT U.USER_ID,
               U.DEPARTMENT_ID,
               U.EMPLOYEE_NO,
               U.NAME,
               U.EMAIL,
               U.PHONE_NUMBER,
               D.DEPARTMENT_NAME,
               P.POSITION_NAME
        FROM GROUVY_USERS U
                 LEFT JOIN GROUVY_DEPARTMENTS D ON U.DEPARTMENT_ID = D.DEPARTMENT_ID
                 LEFT JOIN GROUVY_POSITIONS P ON U.POSITION_NO = P.POSITION_NO
        WHERE U.DEPARTMENT_ID = #{departmentId}
          AND U.IS_DELETED = 'N'
        ORDER BY U.NAME ASC
    </select>

    <!-- findUserNameByUserId: 특정 사용자 ID로 사용자 이름(NAME)만 조회합니다. -->
    <select id="findUserNameByUserId" parameterType="int" resultType="string">
        SELECT NAME
        FROM GROUVY_USERS
        WHERE USER_ID = #{userId}
    </select>

    <!-- countUsersInDepartment: 특정 부서에 소속된 사용자 수 조회 -->
    <select id="countUsersInDepartment" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM GROUVY_USERS
        WHERE DEPARTMENT_ID = #{departmentId}
          AND IS_DELETED = 'N'
    </select>

    <!-- void updateUserProfile(@Param("userId") int userId, @Param("imageUrl")  String imageUrl); -->
    <update id="updateUserProfile">
        UPDATE GROUVY_USERS
        SET PROFILE_IMG_PATH = #{imageUrl}
        WHERE USER_ID = #{userId}
    </update>
</mapper>